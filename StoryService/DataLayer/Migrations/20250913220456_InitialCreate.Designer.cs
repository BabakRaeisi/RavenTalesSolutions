// <auto-generated />
using System;
using DataLayer.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(StoryDbContext))]
    [Migration("20250913220456_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoreLayer.Entities.Sentence", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.Property<Guid>("StoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EndChar")
                        .HasColumnType("int");

                    b.Property<int>("StartChar")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "StoryId");

                    b.HasIndex("StoryId");

                    b.ToTable("Sentences");
                });

            modelBuilder.Entity("CoreLayer.Entities.Story", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LanguageLevel")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TargetLanguage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("LanguageLevel", "TargetLanguage", "CreatedAt");

                    b.ToTable("Stories");
                });

            modelBuilder.Entity("CoreLayer.Entities.Unit", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.Property<Guid>("StoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDiscontinuous")
                        .HasColumnType("bit");

                    b.Property<string>("Pieces")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SentenceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "StoryId");

                    b.HasIndex("StoryId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("CoreLayer.Entities.UserPreferences", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUsedLanguageLevel")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastUsedTargetLanguage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PreferredTranslationLanguage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SavedStoryIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeenStoryIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("CoreLayer.Entities.Sentence", b =>
                {
                    b.HasOne("CoreLayer.Entities.Story", null)
                        .WithMany("Sentences")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoreLayer.Entities.Unit", b =>
                {
                    b.HasOne("CoreLayer.Entities.Story", null)
                        .WithMany("Units")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("CoreLayer.Entities.Segment", "Segments", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("UnitId")
                                .HasColumnType("varchar(64)");

                            b1.Property<Guid>("StoryId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("EndChar")
                                .HasColumnType("int");

                            b1.Property<int>("StartChar")
                                .HasColumnType("int");

                            b1.HasKey("Id", "UnitId", "StoryId");

                            b1.HasIndex("UnitId", "StoryId");

                            b1.ToTable("Unit_Segments", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UnitId", "StoryId");
                        });

                    b.Navigation("Segments");
                });

            modelBuilder.Entity("CoreLayer.Entities.Story", b =>
                {
                    b.Navigation("Sentences");

                    b.Navigation("Units");
                });
#pragma warning restore 612, 618
        }
    }
}
